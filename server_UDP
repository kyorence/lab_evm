#include <stdio.h>
#include <winsock2.h>
#include <windows.h>
#pragma comment(lib, "ws2_32.lib")
#define MY_PORT 444
#define BUFFER_SIZE 1024

int main(int argc, char* argv[])
{
    WSADATA wsaData;
    SOCKET udpSocket;
    sockaddr_in localAddr, clientAddr;
    char buffer[BUFFER_SIZE];
    int clientAddrSize = sizeof(clientAddr);

    printf("UDP SERVER DEMO\n");

    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
    {
        printf("Error WSAStartup %d\n", WSAGetLastError());
        return -1;
    }

    udpSocket = socket(AF_INET, SOCK_DGRAM, 0);
    if (udpSocket == INVALID_SOCKET)
    {
        printf("Error creating socket %d\n", WSAGetLastError());
        WSACleanup();
        return -1;
    }

    localAddr.sin_family = AF_INET;
    localAddr.sin_port = htons(MY_PORT);
    localAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(udpSocket, (sockaddr*)&localAddr, sizeof(localAddr)) == SOCKET_ERROR)
    {
        printf("Error binding socket %d\n", WSAGetLastError());
        closesocket(udpSocket);
        WSACleanup();
        return -1;
    }

    printf("Ожидание сообщений...\n");

    while (1)
    {
        int recvLen = recvfrom(udpSocket, buffer, BUFFER_SIZE - 1, 0,
                               (sockaddr*)&clientAddr, &clientAddrSize);
        
        if (recvLen == SOCKET_ERROR)
        {
            printf("Error receiving data %d\n", WSAGetLastError());
            break;
        }

        buffer[recvLen] = '\0';
        printf("Received from [%s:%d]: %s", inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port), buffer);

        sendto(udpSocket, buffer, recvLen, 0, (sockaddr*)&clientAddr, clientAddrSize);
        
        if (strcmp(buffer, "exit\n") == 0)
            break;
    }

    closesocket(udpSocket);
    WSACleanup();
    return 0;
}
